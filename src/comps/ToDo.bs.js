// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("TodoItem");

function make(item, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          className: "item"
                        }, React.createElement("input", {
                              checked: item[/* completed */2],
                              type: "checkbox"
                            }), item[/* text */1]);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var TodoItem = /* module */[
  /* component */component,
  /* make */make
];

function valueFromEvent(evt) {
  return evt.target.value;
}

var component$1 = ReasonReact.reducerComponent("Input");

function make$1(onSubmit, param) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var text = param[/* state */1];
              return React.createElement("input", {
                          placeholder: "Write something to do",
                          type: "text",
                          value: text,
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                Curry._1(onSubmit, text);
                                return Curry._1(send, "");
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function (evt) {
                              return Curry._1(send, evt.target.value);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return "";
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (newText, _text) {
              return /* Update */Block.__(0, [newText]);
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var Input = /* module */[
  /* component */component$1,
  /* make */make$1
];

var component$2 = ReasonReact.reducerComponent("ToDo");

var lastId = /* record */[/* contents */0];

function newItem(param) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* text */"default text",
          /* completed */false
        ];
}

function newItemWithName(text) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* text */text,
          /* completed */false
        ];
}

function make$2(message, _children) {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("div", {
                              className: "Todo"
                            }, message), React.createElement("button", {
                              onClick: (function (evt) {
                                  console.log("didn't add something");
                                  return /* () */0;
                                })
                            }, "Add something"), React.createElement("p", undefined), React.createElement("button", {
                              onClick: (function (evt) {
                                  return Curry._1(self[/* send */3], /* AddItem */0);
                                })
                            }, "Add more of something "), React.createElement("p", undefined), React.createElement("p", undefined), React.createElement("p", undefined), React.createElement("div", {
                              className: "title"
                            }, "What to do", ReasonReact.element(undefined, undefined, make$1((function (text) {
                                        return Curry._1(self[/* send */3], /* AddItemWithName */[text]);
                                      }), /* array */[]))), React.createElement("div", {
                              className: "items"
                            }, $$Array.of_list(List.map((function (item) {
                                        return ReasonReact.element(undefined, undefined, make(item, /* array */[]));
                                      }), self[/* state */1][/* items */0]))));
            }),
          /* initialState */(function (param) {
              return /* record */[/* items : :: */[
                        /* record */[
                          /* id */0,
                          /* text */"first item",
                          /* completed */false
                        ],
                        /* [] */0
                      ]];
            }),
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */(function (action, param) {
              var items = param[/* items */0];
              if (action) {
                return /* Update */Block.__(0, [/* record */[/* items : :: */[
                              newItemWithName(action[0]),
                              items
                            ]]]);
              } else {
                return /* Update */Block.__(0, [/* record */[/* items : :: */[
                              newItem(/* () */0),
                              items
                            ]]]);
              }
            }),
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

exports.str = str;
exports.TodoItem = TodoItem;
exports.valueFromEvent = valueFromEvent;
exports.Input = Input;
exports.component = component$2;
exports.lastId = lastId;
exports.newItem = newItem;
exports.newItemWithName = newItemWithName;
exports.make = make$2;
/* component Not a pure module */
